<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>BracesOnIfStatements:extensions.kt$if</ID>
    <ID>CognitiveComplexMethod:AStarMode.kt$AStarMode$private fun findPath(start: Vec3i, end: Vec3i, maxCost: Int, maxIterations: Int = 500): List&lt;Vec3i></ID>
    <ID>CognitiveComplexMethod:BlockExtensions.kt$fun Block?.isInteractable(blockState: BlockState?): Boolean</ID>
    <ID>CognitiveComplexMethod:ClickGuiPanel.kt$ClickGuiPanel$@Suppress("UnusedParameter") fun mouseDragged(mouseX: Double, mouseY: Double, button: Int, deltaX: Double, deltaY: Double): Boolean</ID>
    <ID>CognitiveComplexMethod:ClickGuiPanelWidgetFactory.kt$ClickGuiPanelWidgetFactory$private fun collectValues( configurable: Configurable, list: MutableList&lt;Pair&lt;Value&lt;*>, Int>>, indent: Int, expandedSections: Map&lt;String, Boolean> )</ID>
    <ID>CognitiveComplexMethod:Command.kt$Command$fun autoComplete( builder: SuggestionsBuilder, tokenizationResult: Pair&lt;List&lt;String>, List&lt;Int>>, commandIdx: Int, isNewParameter: Boolean )</ID>
    <ID>CognitiveComplexMethod:CommandManager.kt$CommandManager$@ScriptApiRequired @JvmName("execute") fun execute(cmd: String)</ID>
    <ID>CognitiveComplexMethod:CommandManager.kt$CommandManager$fun autoComplete(origCmd: String, start: Int): CompletableFuture&lt;Suggestions></ID>
    <ID>CognitiveComplexMethod:CommandManager.kt$CommandManager$fun tokenizeCommand(line: String): Pair&lt;List&lt;String>, List&lt;Int>></ID>
    <ID>CognitiveComplexMethod:PlacementRenderHandler.kt$PlacementRenderHandler$fun render(event: WorldRenderEvent, time: Long)</ID>
    <ID>CognitiveComplexMethod:SimulatedArrow.kt$SimulatedArrow$private fun updateCollision(pos: Vec3d, newPos: Vec3d): HitResult?</ID>
    <ID>CognitiveComplexMethod:extensions.kt$fun Task.getContributors(repoOwner: String, repoName: String): List&lt;String></ID>
    <ID>EmptyFunctionBlock:ModuleFreeCam.kt$ModuleFreeCam.Navigation${ }</ID>
    <ID>LongMethod:CommandClientIntegrationSubcommand.kt$CommandClientIntegrationSubcommand$private fun menuSubcommand()</ID>
    <ID>LongMethod:CommandManager.kt$CommandManager$@ScriptApiRequired @JvmName("execute") fun execute(cmd: String)</ID>
    <ID>LongParameterList:ClickGuiPanelWidgetFactory.kt$ClickGuiPanelWidgetFactory$( value: Value&lt;*>, widgetX: Int, widgetY: Int, widgetWidth: Int, module: ClientModule, expandedSections: Map&lt;String, Boolean> )</ID>
    <ID>LoopWithTooManyJumpStatements:BlockPlacer.kt$BlockPlacer$while</ID>
    <ID>LoopWithTooManyJumpStatements:ModuleProjectilePuncher.kt$ModuleProjectilePuncher$for</ID>
    <ID>LoopWithTooManyJumpStatements:TargetFinding.kt$for</ID>
    <ID>MatchingDeclarationName:tasks.kt$CompareJsonKeysTask : DefaultTask</ID>
    <ID>MaxLineLength:ModuleBookBot.kt$ModuleBookBot.BookBuilder$*</ID>
    <ID>MaxLineLength:ModuleBookBot.kt$ModuleBookBot.GenerationMode.Random$*</ID>
    <ID>MaxLineLength:extensions.kt$logger.error("Failed to get GitHub API response for $repoOwner:$repoName (HTTP ${response.statusCode()}): ${response.body().bufferedReader().readText()}")</ID>
    <ID>NestedBlockDepth:AStarMode.kt$AStarMode$private fun findPath(start: Vec3i, end: Vec3i, maxCost: Int, maxIterations: Int = 500): List&lt;Vec3i></ID>
    <ID>NestedBlockDepth:ClickGuiPanel.kt$ClickGuiPanel$@Suppress("UnusedParameter") fun mouseDragged(mouseX: Double, mouseY: Double, button: Int, deltaX: Double, deltaY: Double): Boolean</ID>
    <ID>NestedBlockDepth:ClickGuiPanelWidgetFactory.kt$ClickGuiPanelWidgetFactory$private fun collectValues( configurable: Configurable, list: MutableList&lt;Pair&lt;Value&lt;*>, Int>>, indent: Int, expandedSections: Map&lt;String, Boolean> )</ID>
    <ID>NestedBlockDepth:CommandManager.kt$CommandManager$fun autoComplete(origCmd: String, start: Int): CompletableFuture&lt;Suggestions></ID>
    <ID>ThrowsCount:CommandManager.kt$CommandManager$@ScriptApiRequired @JvmName("execute") fun execute(cmd: String)</ID>
    <ID>TooManyFunctions:ClickGuiPanelWidgetFactory.kt$ClickGuiPanelWidgetFactory</ID>
    <ID>UnusedPrivateMember:HumanInputDeserializer.kt$HumanInputDeserializer$private fun fail(s: String): Boolean</ID>
    <ID>VariableNaming:build.gradle.kts$val archives_base_name: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val fabric_kotlin_version: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val fabric_version: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val loader_version: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val maven_group: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val min_loader_version: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val minecraft_version: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val mod_version: String by project</ID>
    <ID>VariableNaming:build.gradle.kts$val viafabricplus_version: String by project</ID>
    <ID>VariableNaming:settings.gradle.kts$val kotlin_version: String by settings</ID>
    <ID>VariableNaming:settings.gradle.kts$val loom_version: String by settings</ID>
  </CurrentIssues>
</SmellBaseline>
